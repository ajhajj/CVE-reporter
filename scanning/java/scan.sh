#!/bin/sh

# folder where container filesystem tars are located
TAR_FLDR=images

# temporary folder used to extract and search named container tar files
FLDR="image"

# temporary folder used to expand and search WAR archives
WAR_FLDR="war"

# folder where scan reports are to be saved
REPORTS="reports"

function jar_scan()
  {
    local fldr="./${1}"
    local className="${2}"

    find ${fldr}/ \( -name "*.jar" -o -name "*.zip" \) | while read JAR;
      do
        # skipping symbolic links (duplicate scanning)
        if [ ! -h "${JAR}" ]; then
          CLASSES=( $(jar -tf ${JAR} | grep ${className}) )
    
          if [ ${#CLASSES[@]} -gt 0 ]; then
            printf "\n%s\n" "-------------------------------------------"
            printf "JAR File: %s\n" $(basename ${JAR})
            printf "JAR Path: %s\n" "$(echo ${JAR} | sed -e 's|^.*'"${fldr}"'||' -e 's|^\(/.*/\).*|\1|')"
            printf "%s\n\n" "-------------------------------------------"

            for class in "${CLASSES[@]}"
              do
                if [ -n "${class}" ]; then
                  frmtClass=$(echo "${class}" | sed -e 's|/$||' -e 's/.class$//' -e 's|/|.|g') 
                  echo "Class: ${frmtClass}" 
                fi
              done
            printf "\n"
          fi
        fi 
      done
  }

function war_scan()
  {
    local fldr="./${1}"
    local className="${2}"

    find ${fldr}/ -name "*.war" | while read WAR;
      do
        # skipping symbolic links (duplicate scanning)
        if [ ! -h "${WAR}" ]; then
          rm -rf ${WAR_FLDR}
          mkdir ${WAR_FLDR}
          cd ${WAR_FLDR}
          jar -xf ../${WAR}
          cd ..
          printf "\n%s\n" "-------------------------------------------"
          printf "WAR File: %s\n" "$(basename ${WAR})"
          printf "WAR Path: %s\n" "$(echo ${WAR} | sed -e 's|^'"${fldr}"'||' -e 's|^\(/.*/\).*|\1|')"
          printf "%s\n\n" "-------------------------------------------"
          jar_scan ${WAR_FLDR} ${className}
        fi
      done
    rm -rf ${WAR_FLDR}
  }

function container_scan()
{
  local TAR="first"
  local lastTAR=""

  # sorting the config will group by tar file
  sort scan.cfg > /tmp/sorted.cfg

  rm -rf ${REPORTS}
  mkdir ${REPORTS}

  while IFS="" read -r SCN_TRGT || [ -n "${SCN_TRGT}" ]
  do
    # whitespace trim
    SCN_TRGT=$(echo "${SCN_TRGT}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
    
    # comment removal
    SCN_TRGT=$(echo "${SCN_TRGT}" | sed -e 's/^#.*$//')
    
    if [ -n "${SCN_TRGT}" ]; then
      if [ ! "${TAR}" == "first" ]; then
        lastTAR=${TAR}
      fi
      TAR=$(echo "${SCN_TRGT}" | sed -e 's/\(^.*\):.*/\1/' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
      local CLASS=$(echo "${SCN_TRGT}" | sed -e 's/^.*:\(.*$\)/\1/' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')

      # keep from extracting a tar more than once
      if [ ! "${TAR}" == "${lastTAR}" ]; then

        # output only once per tar even if the tar is named multiple times in config
        printf "\n%s\n" "============================================"
        printf "Processing tar file: %s\n" "${TAR}"
        printf "%s\n" "============================================"
        
        REPORT_FILE="${REPORTS}/$(basename -s .tar ${TAR}).txt"
        # container tars typically have files with root ownership
        sudo rm -rf ${FLDR}

        mkdir ${FLDR}
        cd ${FLDR}
        tar -xf ../${TAR_FLDR}/${TAR}
        cd ..
      fi

      printf "\n%s\n" "============================================" | tee -a ${REPORT_FILE}
      printf "Beginning Scan for: \"%s\"\n" ${CLASS} | tee -a ${REPORT_FILE}
      printf "%s\n\n" "============================================" | tee -a ${REPORT_FILE}

      jar_scan "${FLDR}" "${CLASS}" >> ${REPORT_FILE}
      war_scan "${FLDR}" "${CLASS}" >> ${REPORT_FILE} 
    fi

  done < /tmp/sorted.cfg
  rm -f /tmp/sorted.cfg
}

clear

container_scan
